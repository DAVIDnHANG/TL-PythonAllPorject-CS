a) This is O(n). When running this code, whatever I put in for n was generally returned for a count of the function run. (see test.py, test1) Only once a surpassed n by more times than n * n * n, did the count start returning less than n. which in the case in my test, was well over 90000000.

b) In test.py (test2) I discovered running this code resulted in a number more than O(n) but less than O(n^2). the sum ended up being just over 10 times (not exactly, increasing amounts per increase of input.) the amount imput for n. I believe this is O(n log n). The value gets continually higher based on inputs of 1, 10, 100, the output continuously increases to be more than 10 times. Final answer, O(n log n).

c) I was unable to make this function print, kept getting TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'. I believe this is O(n) because it is recursive, but it only calls itself as many times as the original value input for bunnies.

## Exercise II

A binary search tree would be best for this problem.BST is also O(log n)


We start at the middle by divinding the total amount of floors by 2, and starting at the returned floor value.

Drop the egg.
If the egg breaks, we go to the middle of the lower half of the binary search tree by dividing the current floor by 2.
If it doesn't break we go to the middle of the upper half by adding current floor to top and divide by 2.

When we reach the floor at the end of the tree that does not
break, we
check
one
floor
above and make
sure
it
breaks, we
then
return the
floor
we
ended
on, being
f - 1.

